<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>facing="left";
image_xscale=-1;
//hp=100;
hp=global.diff_health;
grav = 1;
//spd = .5;
spd=global.diff_speed;
jspd = 8;
hspd = 0;
vspd = 0;
//image_speed=.2;
image_speed=global.diff_imgspeed;

isDead=false;

bop=instance_create(x,y-10,obj_bop);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
// dead
if(hp&lt;=0){
    if(isDead==false){
        isDead=true;
    // INITIAL DEATH
    sprite_index=spr_zombie_dead;
    if(facing=="left")
    image_xscale=-1;
    
    //blood
    repeat(100){
        instance_create(x,y,obj_blood);
    }
    
   } 
    if(sprite_index==spr_zombie_dead &amp;&amp; image_index&gt;=4){
        instance_destroy();
        dead=instance_create(x,y,obj_dead_enemy);
        dead.facing=facing;
        with(bop)
            instance_destroy();
    }
}
else{


bop.x=x;
bop.y=y-10;


// Vertical collisions
if (place_meeting(x, y+vspd, obj_solid)) {
    while (!place_meeting(x, y+sign(vspd), obj_solid)) {
        y+= sign(vspd);
    }
    vspd = 0;
}

// Move vertically (gravity)
y += vspd;

if(image_index&gt;2){
if(facing=="left"){
    x-=spd;
}
else
    x+=spd;
}
// Check for the ground
if (place_meeting(x, y+1, obj_solid)) {
    vspd = 0;

} else {
    // Gravity
    if (vspd &lt; 10) {
        vspd += grav;

    }
}

// check for turn around
if (collision_rectangle(x-8,y+2,x+8,y+2,obj_solid,0,0) &amp;&amp; vspd==0) {
    if(facing=="right"){
        facing="left";
        image_xscale=-1;
    }else if(facing=="left"){
        facing="right";
        image_xscale=1;
    }
}


//dead
// bop

   if(collision_rectangle(bop.x-8,bop.y-4,bop.x+8,bop.y-2,obj_player,1,0)){
       hp-=100;
    }

//if(collision_rectangle(x-8,y-12,x+8,y-12,obj_player,0,0)){
//    hp-=100;
//}
if (collision_rectangle(x-10,y+2,x+10,y+2,obj_bullet,0,0)) {
    hp-=100;
}

} // end alive






</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
