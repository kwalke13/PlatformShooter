<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_alex_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize variables
facing="right";

isDead=false;
grav = 1;
spd = 2;
jspd = 8;
hspd = 0;
vspd = 0;

jumping=false;

cutscene_done=false;

wep="rifle";

hp=100;

character_idle=global.character_idle;
character_run=global.character_run;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Platform Physics

if(hp&lt;=0){
    if(isDead==false){
        sprite_index=spr_dead;
        isDead=true;
        repeat(100){
            instance_create(x,y,obj_blood);
        }
        instance_create(x,y-64,obj_restart);
        with(obj_gunCon){
            instance_destroy();
            }
    }
    if(sprite_index==spr_dead &amp;&amp; image_alpha&gt;=0){
        image_alpha-=.1;
        y-=1;
    }
}
else{

var rkey = gamepad_button_check(0,gp_padr) || keyboard_check(ord('D'));
//var lkey = keyboard_check(ord('A'));
var lkey = gamepad_button_check(0,gp_padl) || keyboard_check(ord('A'));
var jkey = gamepad_button_check(0,gp_face1) || keyboard_check(ord('W'));


// Check for the ground
if (place_meeting(x, y+1, obj_solid)) {
    vspd = 0;
    jumping=false;
    
    if (jkey) {
        vspd = -jspd;
        jumping=true;
    }
} else {
    // Gravity
    if (vspd &lt; 10) {
        vspd += grav;
        jumping=true;
    }
}
// bounce off enemy head!!

//if(collision_rectangle(x-8,y+10,x+8,y+10,obj_bop,1,0)){
if(place_meeting(x,y,obj_bop)){
    vspd += -jspd;   
}


// Moving right
if (rkey) {
    hspd = spd;
    //facing="right";
}

// Moving left
if (lkey) {
    hspd = -spd;
    //facing="left";
}

// Check for not moving
if ((!rkey &amp;&amp; !lkey) || (rkey &amp;&amp; lkey)) {
    hspd = 0;
}

// Horizontal collisions
if (place_meeting(x+hspd, y, obj_solid)) {
    while (!place_meeting(x+sign(hspd), y, obj_solid)) {
        x+= sign(hspd);
    }
    hspd = 0;
}

// Move horizontally
x += hspd;

// Vertical collisions
if (place_meeting(x, y+vspd, obj_solid)) {
    while (!place_meeting(x, y+sign(vspd), obj_solid)) {
        y+= sign(vspd);
    }
    vspd = 0;
}

// Move vertically
y += vspd;


// control player sprite
if(jumping==true){
    sprite_index=character_idle;
    image_speed=0;
    if(vspd&lt;0)
        image_index=0;
    else
        image_index=1;
    
}
else{
    if(xprevious != x){
        sprite_index=character_run;
        image_speed=.2;
    }
    else{
        sprite_index=character_idle;
        image_speed=.1;
    }
}

// modify direction OLD
//if(xprevious&lt;x){
//    image_xscale=1;
//}else if(xprevious&gt;x){
//    image_xscale=-1;
//}
if(keyboard_check(vk_left) || gamepad_axis_value(0,gp_axisrh)&lt;0){
    image_xscale=-1;
    facing="left";
}
else if(keyboard_check(vk_right) || gamepad_axis_value(0,gp_axisrh)&gt;0){
    image_xscale=1;
    facing="right";
}
}

// respawn
//if(y &gt; room_height){
//    obj_check = instance_nearest(x,y,obj_checkpoint);
//    x=obj_check.x;
//    y=obj_check.y;
//    global.hp--;
//}

// next room
//if(x&gt; room_width){
//    room_goto_next();
//}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_enemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hp-=100;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();

//draw_rectangle(x-8,y+10,x+8,y+10,1);
// debug
//draw_text(x+20,y+20,"jumping: "+string(jumping));
//draw_text(x+20,y+20,"vspd: "+string(vspd));

//draw_text(x+20,y-20,string(instance_number(obj_spawner)));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
